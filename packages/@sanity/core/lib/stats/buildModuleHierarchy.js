'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
function buildHierarchy(modules) {
  let maxDepth = 1;

  const root = {
    children: [],
    name: 'root'
  };

  modules.forEach(module => {
    const mod = {
      displayName: normalizeName(module.name),
      sanityRole: getSanityRole(module.name),
      fullName: module.name,
      size: module.size
    };

    const depth = mod.fullName.split('/').length - 1;
    if (depth > maxDepth) {
      maxDepth = depth;
    }

    let fileName = mod.fullName;
    const beginning = mod.fullName.slice(0, 2);
    if (beginning === './') {
      fileName = fileName.slice(2);
    }

    getFile(mod, fileName, root);
  });

  root.maxDepth = maxDepth;
  return root;
}

function getFile(module, fileName, parentTree) {
  const charIndex = fileName.indexOf('/');

  if (charIndex === -1) {
    module.name = fileName;
    parentTree.children.push(module);
    return;
  }

  let folder = fileName.slice(0, charIndex);
  if (folder === '~') {
    folder = 'node_modules';
  }

  let childFolder = parentTree.children.find(item => item.name === folder);
  if (!childFolder) {
    childFolder = {
      name: folder,
      children: []
    };
    parentTree.children.push(childFolder);
  }

  getFile(module, fileName.slice(charIndex + 1), childFolder);
}

function normalizeName(name) {
  return name.replace(/\?sanityRole=.*/, '');
}

function getSanityRole(name) {
  const match = name.match(/.*?\?sanityRole=(.*?)(&|$)/);
  return match && decodeURIComponent(match[1]);
}

exports.default = buildHierarchy;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdGF0cy9idWlsZE1vZHVsZUhpZXJhcmNoeS5qcyJdLCJuYW1lcyI6WyJidWlsZEhpZXJhcmNoeSIsIm1vZHVsZXMiLCJtYXhEZXB0aCIsInJvb3QiLCJjaGlsZHJlbiIsIm5hbWUiLCJmb3JFYWNoIiwibW9kdWxlIiwibW9kIiwiZGlzcGxheU5hbWUiLCJub3JtYWxpemVOYW1lIiwic2FuaXR5Um9sZSIsImdldFNhbml0eVJvbGUiLCJmdWxsTmFtZSIsInNpemUiLCJkZXB0aCIsInNwbGl0IiwibGVuZ3RoIiwiZmlsZU5hbWUiLCJiZWdpbm5pbmciLCJzbGljZSIsImdldEZpbGUiLCJwYXJlbnRUcmVlIiwiY2hhckluZGV4IiwiaW5kZXhPZiIsInB1c2giLCJmb2xkZXIiLCJjaGlsZEZvbGRlciIsImZpbmQiLCJpdGVtIiwicmVwbGFjZSIsIm1hdGNoIiwiZGVjb2RlVVJJQ29tcG9uZW50Il0sIm1hcHBpbmdzIjoiOzs7OztBQUFBLFNBQVNBLGNBQVQsQ0FBd0JDLE9BQXhCLEVBQWlDO0FBQy9CLE1BQUlDLFdBQVcsQ0FBZjs7QUFFQSxRQUFNQyxPQUFPO0FBQ1hDLGNBQVUsRUFEQztBQUVYQyxVQUFNO0FBRkssR0FBYjs7QUFLQUosVUFBUUssT0FBUixDQUFnQkMsVUFBVTtBQUN4QixVQUFNQyxNQUFNO0FBQ1ZDLG1CQUFhQyxjQUFjSCxPQUFPRixJQUFyQixDQURIO0FBRVZNLGtCQUFZQyxjQUFjTCxPQUFPRixJQUFyQixDQUZGO0FBR1ZRLGdCQUFVTixPQUFPRixJQUhQO0FBSVZTLFlBQU1QLE9BQU9PO0FBSkgsS0FBWjs7QUFPQSxVQUFNQyxRQUFRUCxJQUFJSyxRQUFKLENBQWFHLEtBQWIsQ0FBbUIsR0FBbkIsRUFBd0JDLE1BQXhCLEdBQWlDLENBQS9DO0FBQ0EsUUFBSUYsUUFBUWIsUUFBWixFQUFzQjtBQUNwQkEsaUJBQVdhLEtBQVg7QUFDRDs7QUFFRCxRQUFJRyxXQUFXVixJQUFJSyxRQUFuQjtBQUNBLFVBQU1NLFlBQVlYLElBQUlLLFFBQUosQ0FBYU8sS0FBYixDQUFtQixDQUFuQixFQUFzQixDQUF0QixDQUFsQjtBQUNBLFFBQUlELGNBQWMsSUFBbEIsRUFBd0I7QUFDdEJELGlCQUFXQSxTQUFTRSxLQUFULENBQWUsQ0FBZixDQUFYO0FBQ0Q7O0FBRURDLFlBQVFiLEdBQVIsRUFBYVUsUUFBYixFQUF1QmYsSUFBdkI7QUFDRCxHQXBCRDs7QUFzQkFBLE9BQUtELFFBQUwsR0FBZ0JBLFFBQWhCO0FBQ0EsU0FBT0MsSUFBUDtBQUNEOztBQUdELFNBQVNrQixPQUFULENBQWlCZCxNQUFqQixFQUF5QlcsUUFBekIsRUFBbUNJLFVBQW5DLEVBQStDO0FBQzdDLFFBQU1DLFlBQVlMLFNBQVNNLE9BQVQsQ0FBaUIsR0FBakIsQ0FBbEI7O0FBRUEsTUFBSUQsY0FBYyxDQUFDLENBQW5CLEVBQXNCO0FBQ3BCaEIsV0FBT0YsSUFBUCxHQUFjYSxRQUFkO0FBQ0FJLGVBQVdsQixRQUFYLENBQW9CcUIsSUFBcEIsQ0FBeUJsQixNQUF6QjtBQUNBO0FBQ0Q7O0FBRUQsTUFBSW1CLFNBQVNSLFNBQVNFLEtBQVQsQ0FBZSxDQUFmLEVBQWtCRyxTQUFsQixDQUFiO0FBQ0EsTUFBSUcsV0FBVyxHQUFmLEVBQW9CO0FBQ2xCQSxhQUFTLGNBQVQ7QUFDRDs7QUFFRCxNQUFJQyxjQUFjTCxXQUFXbEIsUUFBWCxDQUFvQndCLElBQXBCLENBQXlCQyxRQUFRQSxLQUFLeEIsSUFBTCxLQUFjcUIsTUFBL0MsQ0FBbEI7QUFDQSxNQUFJLENBQUNDLFdBQUwsRUFBa0I7QUFDaEJBLGtCQUFjO0FBQ1p0QixZQUFNcUIsTUFETTtBQUVadEIsZ0JBQVU7QUFGRSxLQUFkO0FBSUFrQixlQUFXbEIsUUFBWCxDQUFvQnFCLElBQXBCLENBQXlCRSxXQUF6QjtBQUNEOztBQUVETixVQUFRZCxNQUFSLEVBQWdCVyxTQUFTRSxLQUFULENBQWVHLFlBQVksQ0FBM0IsQ0FBaEIsRUFBK0NJLFdBQS9DO0FBQ0Q7O0FBRUQsU0FBU2pCLGFBQVQsQ0FBdUJMLElBQXZCLEVBQTZCO0FBQzNCLFNBQU9BLEtBQUt5QixPQUFMLENBQWEsaUJBQWIsRUFBZ0MsRUFBaEMsQ0FBUDtBQUNEOztBQUVELFNBQVNsQixhQUFULENBQXVCUCxJQUF2QixFQUE2QjtBQUMzQixRQUFNMEIsUUFBUTFCLEtBQUswQixLQUFMLENBQVcsNEJBQVgsQ0FBZDtBQUNBLFNBQU9BLFNBQVNDLG1CQUFtQkQsTUFBTSxDQUFOLENBQW5CLENBQWhCO0FBQ0Q7O2tCQUVjL0IsYyIsImZpbGUiOiJidWlsZE1vZHVsZUhpZXJhcmNoeS5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGJ1aWxkSGllcmFyY2h5KG1vZHVsZXMpIHtcbiAgbGV0IG1heERlcHRoID0gMVxuXG4gIGNvbnN0IHJvb3QgPSB7XG4gICAgY2hpbGRyZW46IFtdLFxuICAgIG5hbWU6ICdyb290J1xuICB9XG5cbiAgbW9kdWxlcy5mb3JFYWNoKG1vZHVsZSA9PiB7XG4gICAgY29uc3QgbW9kID0ge1xuICAgICAgZGlzcGxheU5hbWU6IG5vcm1hbGl6ZU5hbWUobW9kdWxlLm5hbWUpLFxuICAgICAgc2FuaXR5Um9sZTogZ2V0U2FuaXR5Um9sZShtb2R1bGUubmFtZSksXG4gICAgICBmdWxsTmFtZTogbW9kdWxlLm5hbWUsXG4gICAgICBzaXplOiBtb2R1bGUuc2l6ZVxuICAgIH1cblxuICAgIGNvbnN0IGRlcHRoID0gbW9kLmZ1bGxOYW1lLnNwbGl0KCcvJykubGVuZ3RoIC0gMVxuICAgIGlmIChkZXB0aCA+IG1heERlcHRoKSB7XG4gICAgICBtYXhEZXB0aCA9IGRlcHRoXG4gICAgfVxuXG4gICAgbGV0IGZpbGVOYW1lID0gbW9kLmZ1bGxOYW1lXG4gICAgY29uc3QgYmVnaW5uaW5nID0gbW9kLmZ1bGxOYW1lLnNsaWNlKDAsIDIpXG4gICAgaWYgKGJlZ2lubmluZyA9PT0gJy4vJykge1xuICAgICAgZmlsZU5hbWUgPSBmaWxlTmFtZS5zbGljZSgyKVxuICAgIH1cblxuICAgIGdldEZpbGUobW9kLCBmaWxlTmFtZSwgcm9vdClcbiAgfSlcblxuICByb290Lm1heERlcHRoID0gbWF4RGVwdGhcbiAgcmV0dXJuIHJvb3Rcbn1cblxuXG5mdW5jdGlvbiBnZXRGaWxlKG1vZHVsZSwgZmlsZU5hbWUsIHBhcmVudFRyZWUpIHtcbiAgY29uc3QgY2hhckluZGV4ID0gZmlsZU5hbWUuaW5kZXhPZignLycpXG5cbiAgaWYgKGNoYXJJbmRleCA9PT0gLTEpIHtcbiAgICBtb2R1bGUubmFtZSA9IGZpbGVOYW1lXG4gICAgcGFyZW50VHJlZS5jaGlsZHJlbi5wdXNoKG1vZHVsZSlcbiAgICByZXR1cm5cbiAgfVxuXG4gIGxldCBmb2xkZXIgPSBmaWxlTmFtZS5zbGljZSgwLCBjaGFySW5kZXgpXG4gIGlmIChmb2xkZXIgPT09ICd+Jykge1xuICAgIGZvbGRlciA9ICdub2RlX21vZHVsZXMnXG4gIH1cblxuICBsZXQgY2hpbGRGb2xkZXIgPSBwYXJlbnRUcmVlLmNoaWxkcmVuLmZpbmQoaXRlbSA9PiBpdGVtLm5hbWUgPT09IGZvbGRlcilcbiAgaWYgKCFjaGlsZEZvbGRlcikge1xuICAgIGNoaWxkRm9sZGVyID0ge1xuICAgICAgbmFtZTogZm9sZGVyLFxuICAgICAgY2hpbGRyZW46IFtdXG4gICAgfVxuICAgIHBhcmVudFRyZWUuY2hpbGRyZW4ucHVzaChjaGlsZEZvbGRlcilcbiAgfVxuXG4gIGdldEZpbGUobW9kdWxlLCBmaWxlTmFtZS5zbGljZShjaGFySW5kZXggKyAxKSwgY2hpbGRGb2xkZXIpXG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZU5hbWUobmFtZSkge1xuICByZXR1cm4gbmFtZS5yZXBsYWNlKC9cXD9zYW5pdHlSb2xlPS4qLywgJycpXG59XG5cbmZ1bmN0aW9uIGdldFNhbml0eVJvbGUobmFtZSkge1xuICBjb25zdCBtYXRjaCA9IG5hbWUubWF0Y2goLy4qP1xcP3Nhbml0eVJvbGU9KC4qPykoJnwkKS8pXG4gIHJldHVybiBtYXRjaCAmJiBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbMV0pXG59XG5cbmV4cG9ydCBkZWZhdWx0IGJ1aWxkSGllcmFyY2h5XG4iXX0=